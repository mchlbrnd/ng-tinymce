{"version":3,"file":"tinymce-editor.directive.js","sourceRoot":"","sources":["../../src/tinymce-editor.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, forwardRef, ChangeDetectorRef, EventEmitter, Output } from '@angular/core';\nimport { Input } from '@angular/core/src/metadata/directives';\nimport { TinymceEditorSettingsService } from './tinymce-editor-settings.service';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\n\n\nexport class TinymceEditorDirective implements ControlValueAccessor {\n\n  private _tinymceEditor: any;\n  private _value: string;\n  private _onChange: (value: any) => void;\n\n   private _tinymceEditorId: string;\n   private _tinymceEditorSettings: {} = {};\n\n   private _onInitialized = new EventEmitter<any>();\n\n  get editor(): any {\n    return this._tinymceEditor;\n  }\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _providedSettings: TinymceEditorSettingsService) { }\n\n  private _tinymceOnChange = (): void => {\n    this._value = this._tinymceEditor.getContent();\n    this._onChange(this._value);\n    this._changeDetectorRef.detectChanges();\n  };\n\n  private _tinymceInitInstanceCallback = (editor: any): void => {\n    this._tinymceEditor = editor;\n    this._tinymceEditor.on('KeyUp', this._tinymceOnChange);\n    this._tinymceEditor.on('PastePostProcess', this._tinymceOnChange);\n    this._tinymceEditor.on('Change', this._tinymceOnChange);\n    this.writeValue(this._value);\n    this._onInitialized.emit(this._tinymceEditor);\n  };\n\n  ngOnInit(): void {\n    let settings = {\n      init_instance_callback: this._tinymceInitInstanceCallback,\n      target: this._elementRef.nativeElement\n    };\n    settings = Object.assign({}, this._providedSettings, this._tinymceEditorSettings, settings);\n    tinymce.init(settings);\n  }\n\n  ngOnDestroy() {\n    tinymce.remove(this._tinymceEditor);\n  }\n\n  writeValue(value: string) {\n    if (value) {\n      this._value = value;\n\n      if (this._tinymceEditor) {\n        this._tinymceEditor.setContent(this._value, {format : 'raw'});\n      }\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this._onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void { }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: 'p[tinymce], div[tinymce], textarea[tinymce]',\n  exportAs: 'tinymce',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => TinymceEditorDirective),\n      multi: true\n    }\n  ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: ChangeDetectorRef, },\n{type: TinymceEditorSettingsService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'_tinymceEditorId': [{ type: Input, args: ['tinymce', ] },],\n'_tinymceEditorSettings': [{ type: Input, args: ['settings', ] },],\n'_onInitialized': [{ type: Output, args: ['onInitialized', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}